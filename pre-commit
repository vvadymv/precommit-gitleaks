#!/bin/bash

# Check if the pre-commit hook is enabled via git config
ENABLED=$(git config --bool hooks.gitleaks.enabled)

if [ "$ENABLED" != "true" ]; then
  echo "Pre-commit hook for gitleaks is disabled. Enable it with: git config hooks.gitleaks.enabled true"
  exit 0
fi

# Define the version of gitleaks to use
GITLEAKS_VER="v8.18.4"

# Define installation directory in user's home
INSTALL_DIR="$HOME/bin"
GITLEAKS_PATH="$INSTALL_DIR/gitleaks"

# Construct the download URL based on the version
GITLEAKS_URL="https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VER}/gitleaks_${GITLEAKS_VER#v}_linux_x64.tar.gz"

# Function to install gitleaks
install_gitleaks() {
  echo "Installing gitleaks version ${GITLEAKS_VER}..."

  # Create the installation directory if it doesn't exist
  mkdir -p "$INSTALL_DIR"

  # Download and extract only the 'gitleaks' binary
  curl -sSfL "$GITLEAKS_URL" | tar -xz -C "$INSTALL_DIR" gitleaks

  # Check if gitleaks binary exists and make it executable
  if [ -f "$GITLEAKS_PATH" ]; then
    chmod +x "$GITLEAKS_PATH"
    echo "gitleaks version ${GITLEAKS_VER} installed successfully in $INSTALL_DIR."
  else
    echo "Failed to download or extract gitleaks. Please install it manually."
    exit 1
  fi
}

# Check if gitleaks is already installed
if ! command -v gitleaks &> /dev/null; then
  install_gitleaks
fi

# Run gitleaks
echo "Running gitleaks..."
gitleaks protect --staged --verbose --redact --report-path findings.json

# Check the exit status of gitleaks
if [ $? -ne 0 ]; then
  echo "gitleaks detected sensitive information. Commit aborted."
  exit 1
fi

echo "No leaks detected. Proceeding with commit."
exit 0
